<h2>👤 Konto użytkownika</h2>

<!-- Wyświetlenie podstawowych informacji o użytkowniku -->
<p><strong>Email:</strong> <%= current_user.email %></p>
<p><strong>Nazwa użytkownika:</strong> <%= current_user.username %></p>

<!-- Ładowanie biblioteki Chart.js do rysowania wykresu historii salda -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>

<!-- Wyświetlenie avatara, jeśli jest załączony; w przeciwnym razie link do edycji profilu -->
<% if current_user.avatar.attached? %>
  <p>
    <strong>Avatar:</strong><br>
    <%= image_tag current_user.avatar,
                  style: "width:100px;height:100px;border-radius:50%;" %>
  </p>
<% else %>
  <p>
    Brak avatara. Możesz dodać go w
    <%= link_to "edycji profilu", edit_user_registration_path %>.
  </p>
<% end %>

<!-- Saldo użytkownika pobrane z portfela (lub 0, jeśli brak portfela) -->
<p><strong>Saldo:</strong> <%= current_user.wallet&.balance || 0 %> żetonów</p>

<h3>📊 Historia salda</h3>

<!-- Kontener dla wykresu Canvas – określamy rozmiary i tło -->
<div style="position: relative;
  height: 300px;
  width: 100%;
  max-width: 700px;
  margin: 40px auto 60px;
  background: #1c1c1c;">
  <canvas id="balanceChart" width="700" height="300"></canvas>
</div>

<script>
    document.addEventListener("turbo:load", function() {
        const ctx = document.getElementById('balanceChart');
        if (!ctx) return; // Jeśli element nie istnieje, przerywamy

        // 1. Jeśli istnieje poprzednia instancja wykresu, ją niszczymy
        if (window.balanceChartInstance) {
            window.balanceChartInstance.destroy();
        }

        // 2. Przygotowanie danych
        // - labels: tablica znaczników czasowych w formacie "DD MMM HH:MM"
        const labels = <%= raw @balance_history.map { |h| h.created_at.strftime('%d %b %H:%M') }.to_json %>;
        // - dataPoints: akumulowana historia salda (startując od pierwszej wartości)
        const dataPoints = <%= raw @balance_history.inject([1000]) { |arr, h| arr << arr.last + h.amount }.drop(1).to_json %>;

        // 3. Inicjalizacja nowego wykresu liniowego
        window.balanceChartInstance = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: "Saldo w czasie",
                    data: dataPoints,
                    borderColor: "gold",
                    backgroundColor: "rgba(255, 215, 0, 0.1)",
                    fill: true,
                    tension: 0.3,               // zaokrąglenie linii
                    pointHoverRadius: 6,        // większe kółko przy najechaniu
                    pointHitRadius: 10          // większy obszar wykrywania kliknięć
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,

                // 4. Animacje i interakcje
                animations: {
                    tension: {
                        duration: 1000,
                        easing: 'linear'
                    },
                    hover: {
                        duration: 0 // wyłączenie animacji hover
                    }
                },
                interaction: {
                    mode: 'index',
                    intersect: false
                },

                // 5. Ustawienia tooltipów i legendy
                plugins: {
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#ffd700',
                        bodyColor: 'white',
                        displayColors: false,
                        padding: 12,
                        callbacks: {
                            label: function(context) {
                                return `Saldo: ${context.parsed.y} żetonów`;
                            }
                        }
                    },
                    legend: {
                        labels: {
                            color: 'gold',
                            font: { size: 14 }
                        }
                    }
                },

                // 6. Konfiguracja osi
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: 'white',
                            callback: function(value) { return value + ' ż'; }
                        },
                        grid: { color: '#444' }
                    },
                    x: {
                        ticks: { color: 'white' },
                        grid: { color: '#444' }
                    }
                }
            }
        });
    });
</script>
