 
<h2>ðŸ‘¤ Konto uÅ¼ytkownika</h2>

<p><strong>Email:</strong> <%= current_user.email %></p>
<p><strong>Nazwa uÅ¼ytkownika:</strong> <%= current_user.username %></p>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>


<% if current_user.avatar.attached? %>
  <p><strong>Avatar:</strong><br><%= image_tag current_user.avatar, style: "width:100px;height:100px;border-radius:50%;" %></p>
<% else %>
  <p>Brak avatara. MoÅ¼esz dodaÄ‡ go w <%= link_to "edycji profilu", edit_user_registration_path %>.</p>
<% end %>

<p><strong>Saldo:</strong> <%= current_user.wallet&.balance || 0 %> Å¼etonÃ³w</p>

<h3>ðŸ“Š Historia salda</h3>
<div style="position: relative; height: 300px; width: 100%; max-width: 700px; margin: 40px auto 60px; background: #1c1c1c;">
  <canvas id="balanceChart" width="700" height="300"></canvas>
</div>

<script>
  document.addEventListener("turbo:load", function() {
    const ctx = document.getElementById('balanceChart');
    if (!ctx) return;

    // 1. Zniszcz poprzedniÄ… instancjÄ™ wykresu
    if (window.balanceChartInstance) {
      window.balanceChartInstance.destroy();
    }

    // 2. ZDEFINIUJ ZMIENNE PRZED UÅ»YCIEM
    const labels = <%= raw @balance_history.map { |h| h.created_at.strftime('%d %b %H:%M') }.to_json %>;
    const dataPoints = <%= raw @balance_history.inject([1000]) { |arr, h| arr << arr.last + h.amount }.drop(1).to_json %>;

    // 3. Dopiero teraz uÅ¼yj zmiennych
    window.balanceChartInstance = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels, // Teraz zmienna jest dostÄ™pna
        datasets: [{
          label: "Saldo w czasie",
          data: dataPoints,
          borderColor: "gold",
          backgroundColor: "rgba(255, 215, 0, 0.1)",
          fill: true,
          tension: 0.3,
          pointHoverRadius: 6, // wiÄ™kszy rozmiar przy najechaniu
          pointHitRadius: 10   // wiÄ™kszy obszar klikalnoÅ›ci
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        
        // 4. KLUCZOWE: WyÅ‚Ä…cz animacje i popraw interakcje
        animations: {
          tension: {
            duration: 1000,
            easing: 'linear'
          },
          hover: {
            duration: 0 // caÅ‚kowicie wyÅ‚Ä…cz animacje hover
          }
        },
        interaction: {
          mode: 'index',
          intersect: false
        },
        
        // 5. Poprawki tooltipÃ³w
        plugins: {
          tooltip: {
            backgroundColor: 'rgba(0, 0, 0, 0.8)',
            titleColor: '#ffd700',
            bodyColor: 'white',
            displayColors: false,
            padding: 12,
            callbacks: {
              label: function(context) {
                return `Saldo: ${context.parsed.y} Å¼etonÃ³w`;
              }
            }
          },
          legend: {
            labels: {
              color: 'gold',
              font: { size: 14 }
            }
          }
        },
        
        // 6. Skale
        scales: {
          y: {
            beginAtZero: true,
            ticks: { 
              color: 'white',
              callback: function(value) {
                return value + ' Å¼';
              }
            },
            grid: { color: '#444' }
          },
          x: {
            ticks: { color: 'white' },
            grid: { color: '#444' }
          }
        }
      }
    });
  });
</script>
